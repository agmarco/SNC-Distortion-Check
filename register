#!/usr/bin/env python
import sys

import scipy.io

from registration import rigidly_register
import affine

import logging
log = logging.getLogger(__name__)

if __name__ == '__main__':
    if len(sys.argv) != 4:
        print('Usage: register A B TRANSFORM')
        sys.exit(1)

    A_xyz_mat_filename = sys.argv[1]
    A = scipy.io.loadmat(A_xyz_mat_filename)['points']

    B_xyz_mat_filename = sys.argv[2]
    B = scipy.io.loadmat(B_xyz_mat_filename)['points']

    # TODO: determine rho and g based on our knowledge of the phantom
    g = lambda bmag: 1.0
    rho = lambda bmag: 15.0

    xyztpx = rigidly_register(A, B, rho, g, 1e-6)

    a_to_b_registration_matrix = affine.translation_rotation(*xyztpx)

    output_mat_filename = sys.argv[3]
    scipy.io.savemat(output_mat_filename, {
        'xyz_tpx': xyztpx,
        'registration_matrix': a_to_b_registration_matrix,
        'points': affine.apply_affine(a_to_b_registration_matrix, A)
    })
