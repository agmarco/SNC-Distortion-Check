#!/usr/bin/env python
import argparse
from concurrent.futures.process import ProcessPoolExecutor
from subprocess import call
import os
import glob

import itertools

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--data_prefix', help='Prefix of data to generate test data from. Expects dicom files to be in data/dicom/<data_prefix>/*'
                                              ' and golden annotated points to be data/points/<data_prefix>-golden.mat> in Ex: mri-001-axial')
    parser.add_argument('--data_directory', default='data')
    parser.add_argument('--output_directory', default='tmp')
    parser.add_argument('-force', action='store_true', default=False)
    parser.add_argument('-j', type=int, default=None)
    parser.add_argument('-n', action='store_true', default=False)
    args = parser.parse_args()
    def should_run(*paths):
        if args.force or any(not os.path.exists(path) for path in paths):
            return True
    def generate_data_for(data_prefix):
        basename = os.path.join(args.output_directory, data_prefix)
        source_voxels_path = basename + '_voxels.mat'
        if not os.path.exists(source_voxels_path):
            dicom_data_dir = os.path.join(args.data_directory, 'dicom', data_prefix)
            call(['./dicom2mat'] + glob.glob(dicom_data_dir+'/*') +[source_voxels_path])

        golden_points_path = os.path.join(args.data_directory, 'points', data_prefix+'-golden.mat')

        if not os.path.exists(golden_points_path):
            raise Exception('Could not find golden file {}'.format(golden_points_path))

        pool = ProcessPoolExecutor(args.j)
        cmds = []
        decimation_factors = ('2', '3', '4')
        for decimation_factor in decimation_factors:
            decimated_voxel_path = '{}_decimated_{}_voxels.mat'.format(basename, decimation_factor)
            dedcimated_points_path = '{}_decimated_{}_points.mat'.format(basename, decimation_factor)
            if should_run(decimated_voxel_path, dedcimated_points_path):
                cmds.append(['python', '-m', 'testing.decimate_slices', source_voxels_path, decimated_voxel_path, decimation_factor])
                cmds.append(['cp', golden_points_path, dedcimated_points_path])

        distortion_factors = ('0.8e-4', '1.6e-4', '2.4e-4', '3.0e-4')
        for distortion_factor in distortion_factors:
            distorted_voxel_path = '{}_distorted_{}_voxels.mat'.format(basename, distortion_factor)
            distorted_points_path = '{}_distorted_{}_points.mat'.format(basename, distortion_factor)
            if should_run(distorted_voxel_path, distorted_points_path):
                cmds.append(['python', '-m', 'testing.distort_voxel', source_voxels_path, distorted_voxel_path, golden_points_path, distorted_points_path, '--distort_factor', distortion_factor])

        rotation_factors = ('5', '10', '15')
        for rotation_factor in rotation_factors:
            rotated_voxel_path = '{}_rotated_{}_voxels.mat'.format(basename, distortion_factor)
            rotated_points_path = '{}_rotated_{}_points.mat'.format(basename, distortion_factor)
            if should_run(rotated_voxel_path, rotated_points_path):
                cmds.append(['python', '-m', 'testing.distort_voxel', source_voxels_path, rotated_voxel_path, golden_points_path, rotated_points_path, '--xyz_tpx', '0', '0', '0', rotation_factor, rotation_factor, rotation_factor])

        for rotation_factor, distortion_factor in itertools.product(rotation_factors, distortion_factors):
            rotated_distorted_voxel_path = '{}_rotated_{}_distorted_{}_voxels.mat'.format(basename, rotation_factor, distortion_factor)
            rotated_distorted_points_path = '{}_rotated_{}_distorted_{}_points.mat'.format(basename, rotation_factor, distortion_factor)
            if should_run(rotated_distorted_voxel_path, rotated_distorted_points_path):
                cmds.append(['python', '-m', 'testing.distort_voxel', source_voxels_path, rotated_distorted_voxel_path, golden_points_path, rotated_distorted_points_path,
                             '--distort_factor', distortion_factor,
                             '--xyz_tpx', '0', '0', '0', rotation_factor, rotation_factor, rotation_factor])
        print('running commands {}'.format('\n'.join(' '.join(cmd) for cmd in cmds)))

        if not args.n:
            def done_callback(future):
                if future.result() != 0:
                    print('Command FAILED: {}'.format(' '.join(future.cmd)))
            for cmd in cmds:
                future = pool.submit(call, cmd)
                future.cmd = cmd
                future.add_done_callback(done_callback)

    dicom_dir = os.path.join(args.data_directory, 'dicom')
    if args.data_prefix:
        generate_data_for(args.data_prefix)
    else:
        datasets = os.listdir(dicom_dir)
        for dataset in datasets:
            generate_data_for(dataset)

