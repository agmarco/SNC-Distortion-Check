#!/usr/bin/env python
import argparse

import numpy as np

from process import file_io
from process import affine


def print_histogram(data, suffix):
    counts, bin_edges = np.histogram(data[np.isfinite(data)])
    total = np.sum(counts)
    for i, c in enumerate(counts):
        template = '{0:5.3f}{suffix} - {1:5.3f}{suffix}: {2:3.2f}%'
        print(template.format(bin_edges[i], bin_edges[i + 1], c/total*100, suffix=suffix))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('voxels')
    parser.add_argument('distortion')
    args = parser.parse_args()

    voxel_data = file_io.load_voxels(args.voxels)
    voxel_spacing = affine.voxel_spacing(voxel_data['ijk_to_xyz'])

    distortion_mm = file_io.load_distortion(args.distortion)['distortion']
    magnitude_mm = np.linalg.norm(distortion_mm, axis=3)

    distortion_voxels = np.empty_like(distortion_mm)
    distortion_voxels[:, :, :, 0] = distortion_mm[:, :, :, 0]/voxel_spacing[0]
    distortion_voxels[:, :, :, 1] = distortion_mm[:, :, :, 1]/voxel_spacing[1]
    distortion_voxels[:, :, :, 1] = distortion_mm[:, :, :, 2]/voxel_spacing[2]
    magnitude_voxels = np.linalg.norm(distortion_voxels, axis=3)

    is_nan = np.isnan(magnitude_mm)
    num_finite = np.sum(~is_nan)
    num_total = magnitude_mm.size
    print('% volume: {:3.2f}%'.format(num_finite/num_total))
    print('max magnitude: {:5.3f}mm ({:5.3f}vx)'.format(
        np.nanmax(magnitude_mm),
        np.nanmax(magnitude_voxels)
    ))
    print('min magnitude: {:5.3f}mm ({:5.3f}vx)'.format(
        np.nanmin(magnitude_mm),
        np.nanmin(magnitude_voxels)
    ))
    
    print('histogram mm')
    print_histogram(magnitude_mm, 'mm')

    print('histogram voxels')
    print_histogram(magnitude_voxels, '')
