#!/usr/bin/env python
import sys

import dicom
import scipy.io
import matplotlib.pylab as plt

from dicom_import import combine_slices


if __name__ == '__main__':
    if len(sys.argv) <= 3:
        print('Usage: annotate DICOMFILES... MATFILE')
        sys.exit(1)

    input_dicom_filenames = sys.argv[1:-1]
    dicom_datasets = [dicom.read_file(f) for f in input_dicom_filenames]

    voxels, irc_to_patient_xyz_transform = combine_slices(dicom_datasets)

    output_mat_filename = sys.argv[-1]
    try:
        points = list(scipy.io.loadmat(output_mat_filename)['points'])
    except:
        points = []

    fig = plt.figure()
    plt.title('Mouse button 1 records a grid intersection\nMouse button 2 to saves and exits\nMouse wheel scrolls slices')
    ax = fig.add_subplot(111)
    current_slice = 0

    def draw():
        # clear existing stuff
        ax.images = []
        ax.collections = []

        ax.imshow(voxels[:, :, current_slice], cmap='Greys_r')
        ax.imshow(voxels[:, :, current_slice], cmap='Greys_r')

        x_points = [p[0] for p in points if p[2] == current_slice]
        y_points = [p[1] for p in points if p[2] == current_slice]
        ax.scatter(x_points, y_points)

        fig.canvas.draw()

    def onclick(event):
        if event.button == 1 and event.xdata is not None and event.ydata is not None:
            points.append((event.xdata, event.ydata, current_slice))
            print(event.xdata, event.ydata, current_slice)
            draw()
        elif event.button == 2:
            scipy.io.savemat(output_mat_filename, {
                'points': points,
            })
            sys.exit(0)

    def onscroll(event):
        global current_slice
        if event.step < 0:
            current_slice = max(current_slice - 1, 0)
        elif event.step > 0:
            current_slice = min(current_slice + 1, voxels.shape[2] - 1)

        draw()

    fig.canvas.mpl_connect('button_press_event', onclick)
    fig.canvas.mpl_connect('scroll_event', onscroll)
    draw()

    plt.show()
